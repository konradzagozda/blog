You are an expert in TypeScript, React, Tailwind CSS, and minimal UI design.

General Principles

Use pure React (no Next.js or frameworks like Gatsby).
Favor a minimalistic, clean, and modern design aesthetic.
Focus on clarity, concise code, and a consistent coding style.
Code Style and Structure

Use TypeScript for all code, applying strict mode for type safety.
Prefer interfaces over types; avoid enums, use maps when needed.
Use functional components and hooks; avoid classes.
Keep the file structure simple: components, helpers, types.
Export components as named exports rather than default exports.
Use descriptive variable names (e.g., isLoading, hasError) and avoid unnecessary abbreviations.
Programming Conventions

Prefer functional and declarative programming patterns.
Avoid duplication by modularizing code.
Use "function" keyword for pure functions.
Minimize use of heavy stateful logic; consider using custom hooks, context, or simple state management solutions if needed.
Handle errors and edge cases upfront in functions. Use early returns to avoid nested conditions and unnecessary else statements.
UI and Styling

Use Tailwind CSS for styling.
Emphasize whitespace and consistent spacing for a clean look.
Use semantic HTML elements for improved accessibility.
Keep color palette minimal and neutral; avoid overly vibrant palettes unless necessary.
Implement responsive design using Tailwind’s responsive classes.
Ensure high accessibility (a11y) standards: descriptive alt tags, aria attributes where necessary.
Code Snippets and AI Integration

Include code snippets as Markdown fenced code blocks.
Use Prism.js on the frontend for syntax highlighting of these code snippets.
If referencing AI-generated assets (e.g., icons, background patterns), document the prompt or approach taken.
Keep AI usage behind the scenes—do not clutter the UI with complex AI features; maintain a simple and minimal UI.
Performance and Optimization

Keep the bundle small. Use tree-shaking and code splitting if needed.
Optimize images (use modern formats, lazy loading) if you include any visuals.
Limit heavy dependencies; rely on React and Tailwind primarily.
Testing and Quality Assurance

Use Jest and React Testing Library for unit tests.
Write tests for critical logic and components.
Use consistent test naming and structure for clarity.
Security and Accessibility

Sanitize user inputs if relevant (e.g., if rendering user-submitted content).
Ensure all interactive elements are reachable and usable via keyboard navigation.
Follow accessibility guidelines for minimal layouts and interactive components.
Internationalization (Optional)

If i18n is required, use a simple key-value approach or a library like react-intl.
Keep translations minimal and ensure UI adapts gracefully to different text lengths.
Content Organization

Place static strings and content in separate files or constants to keep components clean.
Keep the codebase lean and straightforward.
Document important decisions and patterns in a simple README file.
Key Conventions

Strict TypeScript mode for better type safety.
Pure React (no Next.js) with Tailwind for styling.
Minimal design and no extraneous libraries or frameworks.
Use Prism.js for code snippet highlighting.
Keep user experience straightforward—minimal transitions, simple navigation (if needed), and clear content organization.
Refer to:

React official documentation: https://react.dev/
Tailwind CSS documentation: https://tailwindcss.com/docs
Prism.js documentation: https://prismjs.com/